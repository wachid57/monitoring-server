basePath: /
definitions:
  auth.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.Aknowledged:
    properties:
      id:
        type: integer
      message:
        type: string
      status:
        type: string
      user:
        type: string
    type: object
  model.AvailabilityWebsite:
    properties:
      checkedAt:
        type: string
      id:
        type: integer
      status:
        type: string
      url:
        type: string
    type: object
  model.CPUMetric:
    properties:
      host:
        type: string
      id:
        type: integer
      usage:
        format: float64
        type: number
    type: object
  model.ContactGroup:
    properties:
      desc:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.DiskMetric:
    properties:
      host:
        type: string
      id:
        type: integer
      usage:
        format: float64
        type: number
    type: object
  model.Group:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.Host:
    properties:
      alias:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      deskripsi:
        type: string
      hostname:
        type: string
      hostsTags:
        type: string
      id:
        type: integer
      ip:
        type: string
      keterangan:
        type: string
      service:
        type: string
      updatedAt:
        type: string
    type: object
  model.HostGroup:
    properties:
      alias:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      groupName:
        type: string
      groupsTags:
        type: string
      hostID:
        type: integer
      id:
        type: integer
      keterangan:
        type: string
      updatedAt:
        type: string
    type: object
  model.ICMPService:
    properties:
      host:
        type: string
      id:
        type: integer
      status:
        type: string
    type: object
  model.MemoryMetric:
    properties:
      host:
        type: string
      id:
        type: integer
      usage:
        format: float64
        type: number
    type: object
  model.Notification:
    properties:
      id:
        type: integer
      message:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  model.Permission:
    properties:
      action:
        description: e.g., "create", "read", "update", "delete"
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      module:
        description: e.g., "users", "hosts", "reports"
        type: string
      name:
        type: string
      roles:
        description: Many-to-many relationship with Role
        items:
          $ref: '#/definitions/model.Role'
        type: array
      updated_at:
        type: string
    type: object
  model.ProfileSetting:
    properties:
      id:
        type: integer
      key:
        type: string
      userID:
        type: integer
      value:
        type: string
    type: object
  model.ReportAutomatic:
    properties:
      content:
        type: string
      generatedAt:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  model.ReportManual:
    properties:
      content:
        type: string
      createdBy:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  model.Role:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      native:
        type: boolean
      permissions:
        description: Many-to-many relationship with Permission
        items:
          $ref: '#/definitions/model.Permission'
        type: array
      updated_at:
        type: string
    type: object
  model.RoleBinding:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      group:
        allOf:
        - $ref: '#/definitions/model.Group'
        description: Made nullable with pointer
      group_id:
        description: Made nullable with pointer
        type: integer
      id:
        type: integer
      role:
        $ref: '#/definitions/model.Role'
      role_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
    type: object
  model.ServiceGroup:
    properties:
      desc:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      groups:
        items:
          $ref: '#/definitions/model.Group'
        type: array
      id:
        type: integer
      name:
        type: string
      native:
        type: boolean
      password:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  title: Monitoring Server Backend API
paths:
  /api/v1.0/hosts:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Host'
            type: array
      security:
      - BearerAuth: []
      summary: Get all hosts
      tags:
      - Hosts
    post:
      consumes:
      - application/json
      parameters:
      - description: Host data
        in: body
        name: host
        required: true
        schema:
          $ref: '#/definitions/model.Host'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Host'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new host
      tags:
      - Hosts
  /api/v1.0/hosts/{id}:
    delete:
      parameters:
      - description: Host ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete host by ID
      tags:
      - Hosts
    get:
      parameters:
      - description: Host ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Host'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get host by ID
      tags:
      - Hosts
    put:
      consumes:
      - application/json
      parameters:
      - description: Host ID
        in: path
        name: id
        required: true
        type: integer
      - description: Host data
        in: body
        name: host
        required: true
        schema:
          $ref: '#/definitions/model.Host'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Host'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update host by ID
      tags:
      - Hosts
  /api/v1.0/hosts/groups:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.HostGroup'
            type: array
      security:
      - BearerAuth: []
      summary: Get all host groups
      tags:
      - HostGroups
    post:
      consumes:
      - application/json
      parameters:
      - description: HostGroup data
        in: body
        name: hostgroup
        required: true
        schema:
          $ref: '#/definitions/model.HostGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HostGroup'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new host group
      tags:
      - HostGroups
  /api/v1.0/hosts/groups/{id}:
    delete:
      parameters:
      - description: HostGroup ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete host group by ID
      tags:
      - HostGroups
    get:
      parameters:
      - description: HostGroup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HostGroup'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get host group by ID
      tags:
      - HostGroups
    put:
      consumes:
      - application/json
      parameters:
      - description: HostGroup ID
        in: path
        name: id
        required: true
        type: integer
      - description: HostGroup data
        in: body
        name: hostgroup
        required: true
        schema:
          $ref: '#/definitions/model.HostGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HostGroup'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update host group by ID
      tags:
      - HostGroups
  /api/v1.0/metrics/cpu/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CPUMetric'
            type: array
      security:
      - BearerAuth: []
      summary: List CPU metrics
      tags:
      - Metrics
    post:
      consumes:
      - application/json
      parameters:
      - description: CPU Metric
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CPUMetric'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CPUMetric'
      security:
      - BearerAuth: []
      summary: Create CPU metric
      tags:
      - Metrics
  /api/v1.0/metrics/cpu/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete CPU metric
      tags:
      - Metrics
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CPUMetric'
      security:
      - BearerAuth: []
      summary: Get CPU metric by ID
      tags:
      - Metrics
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: CPU Metric
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.CPUMetric'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CPUMetric'
      security:
      - BearerAuth: []
      summary: Update CPU metric
      tags:
      - Metrics
  /api/v1.0/metrics/disk/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.DiskMetric'
            type: array
      security:
      - BearerAuth: []
      summary: List Disk metrics
      tags:
      - Metrics
    post:
      consumes:
      - application/json
      parameters:
      - description: Disk Metric
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DiskMetric'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DiskMetric'
      security:
      - BearerAuth: []
      summary: Create Disk metric
      tags:
      - Metrics
  /api/v1.0/metrics/disk/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Disk metric
      tags:
      - Metrics
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DiskMetric'
      security:
      - BearerAuth: []
      summary: Get Disk metric by ID
      tags:
      - Metrics
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Disk Metric
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DiskMetric'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DiskMetric'
      security:
      - BearerAuth: []
      summary: Update Disk metric
      tags:
      - Metrics
  /api/v1.0/metrics/memory/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.MemoryMetric'
            type: array
      security:
      - BearerAuth: []
      summary: List Memory metrics
      tags:
      - Metrics
    post:
      consumes:
      - application/json
      parameters:
      - description: Memory Metric
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.MemoryMetric'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MemoryMetric'
      security:
      - BearerAuth: []
      summary: Create Memory metric
      tags:
      - Metrics
  /api/v1.0/metrics/memory/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Memory metric
      tags:
      - Metrics
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MemoryMetric'
      security:
      - BearerAuth: []
      summary: Get Memory metric by ID
      tags:
      - Metrics
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Memory Metric
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.MemoryMetric'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MemoryMetric'
      security:
      - BearerAuth: []
      summary: Update Memory metric
      tags:
      - Metrics
  /api/v1.0/monitoring/aknowledged/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Aknowledged'
            type: array
      security:
      - BearerAuth: []
      summary: List Aknowledged
      tags:
      - Aknowledged
    post:
      consumes:
      - application/json
      parameters:
      - description: Aknowledged
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Aknowledged'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Aknowledged'
      security:
      - BearerAuth: []
      summary: Create Aknowledged
      tags:
      - Aknowledged
  /api/v1.0/monitoring/aknowledged/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Aknowledged
      tags:
      - Aknowledged
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Aknowledged'
      security:
      - BearerAuth: []
      summary: Get Aknowledged by ID
      tags:
      - Aknowledged
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Aknowledged
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Aknowledged'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Aknowledged'
      security:
      - BearerAuth: []
      summary: Update Aknowledged
      tags:
      - Aknowledged
  /api/v1.0/monitoring/contactgroups/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ContactGroup'
            type: array
      security:
      - BearerAuth: []
      summary: List Contact Groups
      tags:
      - ContactGroup
    post:
      consumes:
      - application/json
      parameters:
      - description: Contact Group
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ContactGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContactGroup'
      security:
      - BearerAuth: []
      summary: Create Contact Group
      tags:
      - ContactGroup
  /api/v1.0/monitoring/contactgroups/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Contact Group
      tags:
      - ContactGroup
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContactGroup'
      security:
      - BearerAuth: []
      summary: Get Contact Group by ID
      tags:
      - ContactGroup
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Contact Group
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ContactGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContactGroup'
      security:
      - BearerAuth: []
      summary: Update Contact Group
      tags:
      - ContactGroup
  /api/v1.0/monitoring/notifications/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Notification'
            type: array
      security:
      - BearerAuth: []
      summary: List Notifications
      tags:
      - Notification
    post:
      consumes:
      - application/json
      parameters:
      - description: Notification
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
      security:
      - BearerAuth: []
      summary: Create Notification
      tags:
      - Notification
  /api/v1.0/monitoring/notifications/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Notification
      tags:
      - Notification
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
      security:
      - BearerAuth: []
      summary: Get Notification by ID
      tags:
      - Notification
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Notification
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Notification'
      security:
      - BearerAuth: []
      summary: Update Notification
      tags:
      - Notification
  /api/v1.0/profiles/settings/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ProfileSetting'
            type: array
      security:
      - BearerAuth: []
      summary: List Profile Settings
      tags:
      - ProfileSetting
    post:
      consumes:
      - application/json
      parameters:
      - description: Profile Setting
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ProfileSetting'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProfileSetting'
      security:
      - BearerAuth: []
      summary: Create Profile Setting
      tags:
      - ProfileSetting
  /api/v1.0/profiles/settings/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Profile Setting
      tags:
      - ProfileSetting
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProfileSetting'
      security:
      - BearerAuth: []
      summary: Get Profile Setting by ID
      tags:
      - ProfileSetting
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Profile Setting
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ProfileSetting'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProfileSetting'
      security:
      - BearerAuth: []
      summary: Update Profile Setting
      tags:
      - ProfileSetting
  /api/v1.0/reports/automatic/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ReportAutomatic'
            type: array
      security:
      - BearerAuth: []
      summary: List Automatic Reports
      tags:
      - ReportAutomatic
    post:
      consumes:
      - application/json
      parameters:
      - description: Automatic Report
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReportAutomatic'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ReportAutomatic'
      security:
      - BearerAuth: []
      summary: Create Automatic Report
      tags:
      - ReportAutomatic
  /api/v1.0/reports/automatic/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Automatic Report
      tags:
      - ReportAutomatic
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ReportAutomatic'
      security:
      - BearerAuth: []
      summary: Get Automatic Report by ID
      tags:
      - ReportAutomatic
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Automatic Report
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReportAutomatic'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ReportAutomatic'
      security:
      - BearerAuth: []
      summary: Update Automatic Report
      tags:
      - ReportAutomatic
  /api/v1.0/reports/manual/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ReportManual'
            type: array
      security:
      - BearerAuth: []
      summary: List Manual Reports
      tags:
      - ReportManual
    post:
      consumes:
      - application/json
      parameters:
      - description: Manual Report
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReportManual'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ReportManual'
      security:
      - BearerAuth: []
      summary: Create Manual Report
      tags:
      - ReportManual
  /api/v1.0/reports/manual/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Manual Report
      tags:
      - ReportManual
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ReportManual'
      security:
      - BearerAuth: []
      summary: Get Manual Report by ID
      tags:
      - ReportManual
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Manual Report
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ReportManual'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ReportManual'
      security:
      - BearerAuth: []
      summary: Update Manual Report
      tags:
      - ReportManual
  /api/v1.0/services/availability/icmp/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ICMPService'
            type: array
      security:
      - BearerAuth: []
      summary: List ICMP services
      tags:
      - ICMP
    post:
      consumes:
      - application/json
      parameters:
      - description: ICMP Service
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ICMPService'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ICMPService'
      security:
      - BearerAuth: []
      summary: Create ICMP service
      tags:
      - ICMP
  /api/v1.0/services/availability/icmp/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete ICMP service
      tags:
      - ICMP
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ICMPService'
      security:
      - BearerAuth: []
      summary: Get ICMP service by ID
      tags:
      - ICMP
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: ICMP Service
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ICMPService'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ICMPService'
      security:
      - BearerAuth: []
      summary: Update ICMP service
      tags:
      - ICMP
  /api/v1.0/services/availability/website/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.AvailabilityWebsite'
            type: array
      security:
      - BearerAuth: []
      summary: List Website Availability
      tags:
      - AvailabilityWebsite
    post:
      consumes:
      - application/json
      parameters:
      - description: Website Availability
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.AvailabilityWebsite'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AvailabilityWebsite'
      security:
      - BearerAuth: []
      summary: Create Website Availability
      tags:
      - AvailabilityWebsite
  /api/v1.0/services/availability/website/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Website Availability
      tags:
      - AvailabilityWebsite
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AvailabilityWebsite'
      security:
      - BearerAuth: []
      summary: Get Website Availability by ID
      tags:
      - AvailabilityWebsite
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Website Availability
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.AvailabilityWebsite'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AvailabilityWebsite'
      security:
      - BearerAuth: []
      summary: Update Website Availability
      tags:
      - AvailabilityWebsite
  /api/v1.0/services/groups/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ServiceGroup'
            type: array
      security:
      - BearerAuth: []
      summary: List Service Groups
      tags:
      - ServiceGroup
    post:
      consumes:
      - application/json
      parameters:
      - description: Service Group
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ServiceGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ServiceGroup'
      security:
      - BearerAuth: []
      summary: Create Service Group
      tags:
      - ServiceGroup
  /api/v1.0/services/groups/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Service Group
      tags:
      - ServiceGroup
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ServiceGroup'
      security:
      - BearerAuth: []
      summary: Get Service Group by ID
      tags:
      - ServiceGroup
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service Group
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ServiceGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ServiceGroup'
      security:
      - BearerAuth: []
      summary: Update Service Group
      tags:
      - ServiceGroup
  /api/v1.0/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /api/v1.0/users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - Users
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - Users
  /api/v1.0/users/groups:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Group'
            type: array
      security:
      - BearerAuth: []
      summary: Get all groups
      tags:
      - Groups
    post:
      consumes:
      - application/json
      parameters:
      - description: Group data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.Group'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Group'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new group
      tags:
      - Groups
  /api/v1.0/users/groups/{id}:
    delete:
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete group by ID
      tags:
      - Groups
    get:
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Group'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get group by ID
      tags:
      - Groups
    put:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Group data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.Group'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Group'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update group by ID
      tags:
      - Groups
  /api/v1.0/users/role-bindings:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleBinding'
            type: array
      security:
      - BearerAuth: []
      summary: Get all role bindings
      tags:
      - RoleBindings
    post:
      consumes:
      - application/json
      parameters:
      - description: Role binding data
        in: body
        name: binding
        required: true
        schema:
          $ref: '#/definitions/model.RoleBinding'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleBinding'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new role binding
      tags:
      - RoleBindings
  /api/v1.0/users/role-bindings/{id}:
    delete:
      parameters:
      - description: Role Binding ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete role binding by ID
      tags:
      - RoleBindings
    get:
      parameters:
      - description: Role Binding ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleBinding'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get role binding by ID
      tags:
      - RoleBindings
    put:
      consumes:
      - application/json
      parameters:
      - description: Role Binding ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role binding data
        in: body
        name: binding
        required: true
        schema:
          $ref: '#/definitions/model.RoleBinding'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RoleBinding'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update role binding by ID
      tags:
      - RoleBindings
  /api/v1.0/users/roles:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Role'
            type: array
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      parameters:
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Roles
  /api/v1.0/users/roles/{id}:
    delete:
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete role by ID
      tags:
      - Roles
    get:
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - Roles
    put:
      consumes:
      - application/json
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update role by ID
      tags:
      - Roles
  /api/v1.0/users/roles/users:
    get:
      parameters:
      - description: User ID
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: Get user-role assignments
      tags:
      - Roles
    post:
      consumes:
      - application/json
      parameters:
      - description: '{user_id, role_id?, role_name?}'
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - Roles
  /auth/change-password:
    post:
      consumes:
      - application/json
      parameters:
      - description: Password change request
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register credentials
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register user
      tags:
      - Auth
  /auth/sessions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get active sessions for current user
      tags:
      - Auth
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
